# Generated by Django 4.1.1 on 2022-12-07 23:23

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('POINTS_APP', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Admin_Rewards_Queue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ar_user', models.CharField(max_length=200, null=True, verbose_name='User')),
                ('ar_item', models.CharField(max_length=200, null=True, verbose_name='Item')),
                ('ar_quantity', models.IntegerField(null=True)),
                ('ar_total_points', models.FloatField(null=True)),
                ('ar_date_time', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='AdminRewardsHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user1', models.CharField(max_length=150, null=True)),
                ('item1', models.CharField(max_length=150, null=True)),
                ('quantity1', models.IntegerField(null=True)),
                ('totalpoints1', models.FloatField(null=True)),
                ('timedate1', models.DateTimeField(auto_now_add=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AdminTransactionHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.CharField(max_length=150, null=True)),
                ('recyclable', models.CharField(max_length=150, null=True)),
                ('quantity', models.CharField(max_length=150, null=True)),
                ('points', models.CharField(max_length=150, null=True)),
                ('timedate', models.CharField(max_length=150, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Bottle_Counter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.CharField(max_length=150, null=True)),
                ('count', models.CharField(max_length=150, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BottlePointsEquivalent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bottle_count', models.FloatField(null=True)),
                ('bottle_points', models.FloatField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notif_bin', models.CharField(max_length=200, null=True)),
                ('notif_message', models.CharField(max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PaperModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.FloatField(null=True)),
                ('points', models.FloatField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PaperPointsEquivalent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('paper_weight', models.FloatField(null=True)),
                ('paper_points', models.FloatField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Rewards_Settings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Product_Name', models.CharField(max_length=200, null=True)),
                ('Stocks', models.IntegerField(null=True)),
                ('Color', models.CharField(max_length=200, null=True)),
                ('Value_Points', models.FloatField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Rewardshistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userr', models.CharField(max_length=200, null=True, verbose_name='User')),
                ('items', models.CharField(max_length=200, null=True, verbose_name='Item')),
                ('quantity', models.CharField(max_length=200, null=True, verbose_name='Quantity')),
                ('totalpoints', models.CharField(max_length=200, null=True, verbose_name='Total Points')),
                ('datetime', models.CharField(max_length=200, null=True, verbose_name='Date time')),
            ],
        ),
        migrations.CreateModel(
            name='RewardsQueue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.CharField(max_length=200, null=True)),
                ('item', models.CharField(max_length=200, null=True)),
                ('quantity', models.IntegerField(null=True)),
                ('tpoints', models.IntegerField(null=True)),
                ('td', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='User_Rewards_History1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ur_user', models.CharField(max_length=200, null=True, verbose_name='User')),
                ('ur_item', models.CharField(max_length=200, null=True, verbose_name='Item')),
                ('ur_quantity', models.IntegerField(null=True)),
                ('ur_total_points', models.FloatField(null=True)),
                ('ur_date_time', models.DateTimeField(auto_now_add=True)),
                ('ur_status', models.CharField(max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='User_Transactionhistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('th_userr', models.CharField(max_length=200, null=True)),
                ('th_recyclable', models.CharField(max_length=200, null=True)),
                ('th_quantity', models.CharField(max_length=200, null=True)),
                ('th_totalpoints', models.CharField(max_length=200, null=True)),
                ('th_datetime', models.CharField(max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserPoints',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user1', models.CharField(max_length=200, null=True, verbose_name='User Name')),
                ('points', models.FloatField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Useraccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('Usertype', models.CharField(choices=[('A', 'Admin'), ('S', 'Student')], default='S', max_length=10, verbose_name='Usertype')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.DeleteModel(
            name='Fregistration',
        ),
    ]
